<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nitin Patil</title>
    <link>/</link>
    <description>Recent content on Nitin Patil</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Mar 2019 19:14:46 +0530</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Alter table</title>
      <link>/sql/alter-table/</link>
      <pubDate>Fri, 29 Mar 2019 19:14:46 +0530</pubDate>
      
      <guid>/sql/alter-table/</guid>
      <description>The ALTER TABLE statement is used to add, delete, or modify columns in an existing table. It is also used to add and drop various constraints on an existing table.
Current state CREATE TABLE student( student_id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, first_name VARCHAR(30) NOT NULL, last_name VARCHAR(30) NOT NULL);SHOW TABLES[(&amp;#39;student&amp;#39;,)]DESCRIBE student  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .</description>
    </item>
    
    <item>
      <title>Create database, tables with relation</title>
      <link>/sql/db_interconnected_tables/</link>
      <pubDate>Fri, 29 Mar 2019 19:14:46 +0530</pubDate>
      
      <guid>/sql/db_interconnected_tables/</guid>
      <description>Create database Create a new database named as employees
-- Create a database CREATE DATABASE IF NOT EXISTS employees; Show all the databases
SHOW DATABASES[(&amp;#39;employees&amp;#39;,), (&amp;#39;information_schema&amp;#39;,), (&amp;#39;mysql&amp;#39;,), (&amp;#39;performance_schema&amp;#39;,), (&amp;#39;sakila&amp;#39;,), (&amp;#39;sys&amp;#39;,), (&amp;#39;world&amp;#39;,)] Set the current database as employees
USE employees; Check what is current database
SELECT DATABASE()[(&amp;#39;employees&amp;#39;,)] Create tables Create employees table
CREATE TABLE employees ( emp_no INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, birth_date DATE NOT NULL, first_name VARCHAR(20) NOT NULL, last_name VARCHAR(20) NOT NULL, gender ENUM (&amp;#39;M&amp;#39;,&amp;#39;F&amp;#39;) NOT NULL, hire_date DATE NOT NULL ); VARCHAR - variable-length alphanumeric string, dynamic memory allocation, slower than CHAR</description>
    </item>
    
    <item>
      <title>Drop</title>
      <link>/sql/drop/</link>
      <pubDate>Fri, 29 Mar 2019 19:14:46 +0530</pubDate>
      
      <guid>/sql/drop/</guid>
      <description> Drop table You can drop single table
DROP TABLE IF EXISTS dept_emp; If you want to drop multiple tables
DROP TABLE IF EXISTS dept_manager, titles, salaries, employees, departments; Drop database DROP DATABASE IF EXISTS employees;</description>
    </item>
    
    <item>
      <title>Union</title>
      <link>/sql/union/</link>
      <pubDate>Wed, 13 Feb 2019 18:10:00 +0530</pubDate>
      
      <guid>/sql/union/</guid>
      <description>-- Get the lowest and highest gdp country in single query -- UNION operator is used to combine the result-set of two or more SELECT statements. SELECT * FROM (select top(1) * from world order by gdp desc) a UNION SELECT * FROM (select top(1) * from world order by gdp asc) b  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .</description>
    </item>
    
    <item>
      <title>Order by</title>
      <link>/sql/order_by/</link>
      <pubDate>Wed, 13 Feb 2019 18:08:18 +0530</pubDate>
      
      <guid>/sql/order_by/</guid>
      <description>-- Lowest gdp country SELECT TOP 1 * FROM world ORDER BY gdp  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    country continent area population gdp     0 Afghanistan Asia 647500 31056997 700     -- Highest gdp country SELECT TOP 1 * FROM world ORDER BY gdp DESC  .</description>
    </item>
    
    <item>
      <title>Select where</title>
      <link>/sql/select/</link>
      <pubDate>Wed, 13 Feb 2019 18:05:20 +0530</pubDate>
      
      <guid>/sql/select/</guid>
      <description>SELECT * FROM world  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    country continent area population gdp     0 Afghanistan Asia 647500 31056997 700   1 India Asia 3287590 1095351995 2900   2 China Asia 9596960 1313973713 5000   3 United States North America 9631420 298444215 37800   4 Brazil South America 8511965 188078227 7600   5 South Africa Africa 1219912 44187637 10700   6 France Europe 547030 60876136 27600     Select Where -- get all Asian countries SELECT * from world where continent = &amp;#39;Asia&amp;#39;  .</description>
    </item>
    
    <item>
      <title>Create table</title>
      <link>/sql/create-table/</link>
      <pubDate>Tue, 12 Feb 2019 19:44:49 +0530</pubDate>
      
      <guid>/sql/create-table/</guid>
      <description>-- create table world  CREATE TABLE world ( -- column, datatype, constraint  country VARCHAR(25) NOT NULL PRIMARY KEY, continent VARCHAR(25) NOT NULL, area INT NOT NULL, population INT, gdp INT )-- Get all column names and their data types from table  SELECT COLUMN_NAME, DATA_TYPE from master.INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N&amp;#39;world&amp;#39; -- Use &amp;#34;N&amp;#34; for handlling unicode string like varchar in ANSI(32bit) and nvarchar in unicode(64bit)   .</description>
    </item>
    
    <item>
      <title>Database operations with python</title>
      <link>/sql/sqlalchemy_pandas/</link>
      <pubDate>Fri, 25 Jan 2019 19:14:46 +0530</pubDate>
      
      <guid>/sql/sqlalchemy_pandas/</guid>
      <description>The SQLAlchemy is a python library for efficient database access. It abstracts away many of the common differences between different SQL databases.
pandas has read_sql and DataFrame.to_sql functions which enable easy read/ write of SQL tables from SQLAlchemy connection.
import sqlalchemy as db import pandas as pd Connect with SQL database # PyMySQL is a python connection driver for MySQL !pip3 install PyMySQL create_engine returns an instance of Engine, and it represents the core interface to the database, adapted through a dialect.</description>
    </item>
    
    <item>
      <title>Decision tree algorithm</title>
      <link>/machine_learning/decision_tree_algorithm/</link>
      <pubDate>Fri, 25 Jan 2019 19:14:46 +0530</pubDate>
      
      <guid>/machine_learning/decision_tree_algorithm/</guid>
      <description>Here we will implement the Decision Tree algorithm and compare our algorithm&amp;rsquo;s performance with decision trees from sklearn.tree. Purpose of this excercise is to write minimal implementation to understand how theory becomes code, avoiding layers of abstraction.
Decision Trees are a non-parametric supervised learning method used for classification and regression. The goal of decision tree is to learn simple decision rules from training data and use those rules to predict target value for test data.</description>
    </item>
    
    <item>
      <title>Ensemble, bagging and random forest</title>
      <link>/machine_learning/ensemble_random_forest/</link>
      <pubDate>Fri, 25 Jan 2019 19:14:46 +0530</pubDate>
      
      <guid>/machine_learning/ensemble_random_forest/</guid>
      <description>Ensemble An ensemble is a set of elements that collectively contribute to a whole. A familiar example is a musical ensemble, which blends the sounds of several musical instruments to create harmony, or architectural ensembles. In ensembles, the (whole) harmonious outcome is more important than the performance of any individual part.
In machine learning the goal of ensembling is to combine the predictions of several base estimators built with a given learning algorithm in order to improve generalizability / robustness over a single estimator.</description>
    </item>
    
    <item>
      <title>Feature Selection</title>
      <link>/machine_learning/feature-selection/</link>
      <pubDate>Fri, 25 Jan 2019 19:14:46 +0530</pubDate>
      
      <guid>/machine_learning/feature-selection/</guid>
      <description>Feature selection is very important step in machine learning. In this step we are suppoesed to select features which are giving high model score and drop features reponsible for model score reduction.
There are different techniques used for feature selection. - Use features with corelation (either positive or negative) with target - Train a model and select features with high importance - Use different feature selection algorithms
RFECV Feature ranking with recursive feature elimination and cross-validated selection of the best number of features.</description>
    </item>
    
    <item>
      <title>Gradient boosting machines</title>
      <link>/machine_learning/gradient_boosting_machines/</link>
      <pubDate>Fri, 25 Jan 2019 19:14:46 +0530</pubDate>
      
      <guid>/machine_learning/gradient_boosting_machines/</guid>
      <description>In machine learning we are given a set of data points and goal is to create a function that draws nice curve through the data points. We call that function a model and it maps $X$ to $y$, thus, making predictions given some unknown $x$. Adding up a bunch of subfunctions to create a composite function is called additive modeling. Gradient boosting machines use additive modeling to gradually nudge an approximate model towards a really good model, by adding simple submodels to a composite model.</description>
    </item>
    
    <item>
      <title>Unit testing</title>
      <link>/machine_learning/unit_testing/</link>
      <pubDate>Fri, 25 Jan 2019 19:14:46 +0530</pubDate>
      
      <guid>/machine_learning/unit_testing/</guid>
      <description>We should write the test cases to test our software. These tests ensures no regression in existing functionality while adding new changes to the code.
pytest pytest is a framework that makes building simple and scalable tests easy. Tests are expressive and readable—no boilerplate code required. pytest test cases are a series of functions in a Python file starting with the name test_.
Install Run the following command in your command line:</description>
    </item>
    
    <item>
      <title>Visualize Decision Tree</title>
      <link>/machine_learning/visualize_decision_tree/</link>
      <pubDate>Fri, 25 Jan 2019 19:14:46 +0530</pubDate>
      
      <guid>/machine_learning/visualize_decision_tree/</guid>
      <description>import os # On Windows you need to set your path to graphviz (C:\\Program Files (x86)\\Graphviz2.38\\bin\\ for example)  path_to_graphviz = &amp;#39;C:\\Program Files (x86)\\Graphviz2.38\\bin\\&amp;#39; os.environ[&amp;#34;PATH&amp;#34;] += os.pathsep + path_to_graphviz Train a classifier on iris dataset
from sklearn.datasets import load_iris from sklearn import tree iris = load_iris() clf = tree.DecisionTreeClassifier(max_depth=3) clf = clf.fit(iris.data, iris.target)import graphviz # Calling `export_graphviz` with `out_file=None` returns GraphViz representation (DOT format) of the decision tree as string.</description>
    </item>
    
    <item>
      <title>Github cheatsheet</title>
      <link>/git/github_cheatsheet/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/git/github_cheatsheet/</guid>
      <description>Github repository Create new github repository for your project by executing below command at folder location.
git init Clone an existing git repository Cloning is a process of copying remote github repository to your local machine.
git clone &amp;lt;repo_url&amp;gt; &amp;lt;where_to_clone&amp;gt; Viewing info about remote repo git remote -v Check status of repo You can check status of files, like tracked/untracked
git status Ignore from commit Add entries of files you want to exclude from commit in special file named .</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/me/</link>
      <pubDate>Tue, 01 Jan 2019 11:53:49 -0700</pubDate>
      
      <guid>/about/me/</guid>
      <description>I am a software engineer with 12 years of experience. I am interested in machine learning and working upon my ML skills. This site contains notes prepared as part of my study.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>/projects/projects/</link>
      <pubDate>Tue, 01 Jan 2019 11:53:49 -0700</pubDate>
      
      <guid>/projects/projects/</guid>
      <description>In progress</description>
    </item>
    
  </channel>
</rss>