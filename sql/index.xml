<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQL on Nitin Patil</title>
    <link>/sql/</link>
    <description>Recent content in SQL on Nitin Patil</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Jan 2019 19:14:46 +0530</lastBuildDate>
    
	<atom:link href="/sql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Alter table</title>
      <link>/sql/alter_table/</link>
      <pubDate>Fri, 29 Mar 2019 19:14:46 +0530</pubDate>
      
      <guid>/sql/alter_table/</guid>
      <description>The ALTER TABLE statement is used to add, delete, or modify columns in an existing table. It is also used to add and drop various constraints on an existing table.
Current state CREATE TABLE student( student_id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, first_name VARCHAR(30) NOT NULL, last_name VARCHAR(30) NOT NULL);SHOW TABLES[(&amp;#39;student&amp;#39;,)]DESCRIBE student  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .</description>
    </item>
    
    <item>
      <title>Create database, tables with relation</title>
      <link>/sql/db_interconnected_tables/</link>
      <pubDate>Fri, 29 Mar 2019 19:14:46 +0530</pubDate>
      
      <guid>/sql/db_interconnected_tables/</guid>
      <description>Create database Create a new database named as employees
-- Create a database CREATE DATABASE IF NOT EXISTS employees; Show all the databases
SHOW DATABASES[(&amp;#39;employees&amp;#39;,), (&amp;#39;information_schema&amp;#39;,), (&amp;#39;mysql&amp;#39;,), (&amp;#39;performance_schema&amp;#39;,), (&amp;#39;sakila&amp;#39;,), (&amp;#39;sys&amp;#39;,), (&amp;#39;world&amp;#39;,)] Set the current database as employees
USE employees; Check what is current database
SELECT DATABASE()[(&amp;#39;employees&amp;#39;,)] Create tables Create employees table
CREATE TABLE employees ( emp_no INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY, birth_date DATE NOT NULL, first_name VARCHAR(20) NOT NULL, last_name VARCHAR(20) NOT NULL, gender ENUM (&amp;#39;M&amp;#39;,&amp;#39;F&amp;#39;) NOT NULL, hire_date DATE NOT NULL ); VARCHAR - variable-length alphanumeric string, dynamic memory allocation, slower than CHAR</description>
    </item>
    
    <item>
      <title>Drop</title>
      <link>/sql/drop/</link>
      <pubDate>Fri, 29 Mar 2019 19:14:46 +0530</pubDate>
      
      <guid>/sql/drop/</guid>
      <description> Drop table You can drop single table
DROP TABLE IF EXISTS dept_emp; If you want to drop multiple tables
DROP TABLE IF EXISTS dept_manager, titles, salaries, employees, departments; Drop database DROP DATABASE IF EXISTS employees;</description>
    </item>
    
    <item>
      <title>Select</title>
      <link>/sql/select/</link>
      <pubDate>Fri, 29 Mar 2019 19:14:46 +0530</pubDate>
      
      <guid>/sql/select/</guid>
      <description>Select first 5 records of table
SELECT * FROM world LIMIT 5  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    name continent area population gdp capital tld flag     0 Afghanistan Asia 652230 25500100 20364000000 Kabul .af //upload.wikimedia.org/wikipedia/commons/a/a8/...   1 Albania Europe 28748 2821977 12044000000 Tirana .</description>
    </item>
    
    <item>
      <title>Union</title>
      <link>/sql/union/</link>
      <pubDate>Wed, 13 Feb 2019 18:10:00 +0530</pubDate>
      
      <guid>/sql/union/</guid>
      <description>-- Get the lowest and highest gdp country in single query -- UNION operator is used to combine the result-set of two or more SELECT statements. SELECT * FROM (select top(1) * from world order by gdp desc) a UNION SELECT * FROM (select top(1) * from world order by gdp asc) b  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .</description>
    </item>
    
    <item>
      <title>Order by</title>
      <link>/sql/order_by/</link>
      <pubDate>Wed, 13 Feb 2019 18:08:18 +0530</pubDate>
      
      <guid>/sql/order_by/</guid>
      <description>-- Lowest gdp country SELECT TOP 1 * FROM world ORDER BY gdp  .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; }    country continent area population gdp     0 Afghanistan Asia 647500 31056997 700     -- Highest gdp country SELECT TOP 1 * FROM world ORDER BY gdp DESC  .</description>
    </item>
    
    <item>
      <title>Create table</title>
      <link>/sql/create_table/</link>
      <pubDate>Tue, 12 Feb 2019 19:44:49 +0530</pubDate>
      
      <guid>/sql/create_table/</guid>
      <description>-- create table world  CREATE TABLE world ( -- column, datatype, constraint  country VARCHAR(25) NOT NULL PRIMARY KEY, continent VARCHAR(25) NOT NULL, area INT NOT NULL, population INT, gdp INT )-- Get all column names and their data types from table  SELECT COLUMN_NAME, DATA_TYPE from master.INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N&amp;#39;world&amp;#39; -- Use &amp;#34;N&amp;#34; for handlling unicode string like varchar in ANSI(32bit) and nvarchar in unicode(64bit)   .</description>
    </item>
    
    <item>
      <title>Database operations with python</title>
      <link>/sql/sqlalchemy_pandas/</link>
      <pubDate>Fri, 25 Jan 2019 19:14:46 +0530</pubDate>
      
      <guid>/sql/sqlalchemy_pandas/</guid>
      <description>The SQLAlchemy is a python library for efficient database access. It abstracts away many of the common differences between different SQL databases.
pandas has read_sql and DataFrame.to_sql functions which enable easy read/ write of SQL tables from SQLAlchemy connection.
import sqlalchemy as db import pandas as pd Connect with SQL database # PyMySQL is a python connection driver for MySQL !pip3 install PyMySQL create_engine returns an instance of Engine, and it represents the core interface to the database, adapted through a dialect.</description>
    </item>
    
    <item>
      <title>Explore Nobel Laureates data</title>
      <link>/sql/nobel/</link>
      <pubDate>Fri, 25 Jan 2019 19:14:46 +0530</pubDate>
      
      <guid>/sql/nobel/</guid>
      <description>Here we will create a SQL table from external kaggle dataset of Nobel Laureates. It is available in csv format.
Connect with SQL database import sqlalchemy as db import pandas as pd# Create an engine to the `test` database # The typical form of a database URL is `dialect+driver://username:password@host:port/database` engine = db.create_engine(&amp;#39;mysql+pymysql://root:root@localhost:3306/test&amp;#39;)# Print the table names engine.table_names()[&amp;#39;student_data&amp;#39;, &amp;#39;world&amp;#39;] Handy function for future use.
def ex_df(query): &amp;#34;&amp;#34;&amp;#34;Execute query and return result in pandas.</description>
    </item>
    
  </channel>
</rss>